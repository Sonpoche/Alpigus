// app/api/invoices/route.ts
import { NextRequest, NextResponse } from "next/server"
import { withClientSecurity, validateData, commonSchemas } from "@/lib/api-security"
import { handleError, createError } from "@/lib/error-handler"
import { prisma } from "@/lib/prisma"
import { z } from 'zod'

// Sch√©ma de validation pour la cr√©ation de facture
const createInvoiceSchema = z.object({
  orderId: commonSchemas.id,
  amount: z.number().positive('Le montant doit √™tre positif').max(999999, 'Montant trop √©lev√©'),
  dueDate: z.string().datetime('Date d\'√©ch√©ance invalide')
})

// GET /api/invoices - Obtenir toutes les factures de l'utilisateur
export const GET = withClientSecurity(async (request: NextRequest, session) => {
  try {
    console.log(`üìã R√©cup√©ration factures pour user ${session.user.id}`)

    // R√©cup√©ration s√©curis√©e des factures de l'utilisateur uniquement
    const invoices = await prisma.invoice.findMany({
      where: {
        userId: session.user.id // S√âCURIT√â: Limiter aux factures de l'utilisateur connect√©
      },
      include: {
        order: {
          include: {
            items: {
              include: {
                product: {
                  select: {
                    name: true,
                    unit: true
                  }
                }
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      }
    })

    // V√©rification et mise √† jour automatique des factures en retard
    const today = new Date()
    const updatedInvoices = await Promise.all(
      invoices.map(async (invoice) => {
        const dueDate = new Date(invoice.dueDate)
        
        // Si la facture est en attente et la date d'√©ch√©ance est pass√©e
        if (invoice.status === 'PENDING' && dueDate < today) {
          console.log(`‚è∞ Facture ${invoice.id} marqu√©e en retard`)
          
          // Mettre √† jour le statut dans la base de donn√©es
          await prisma.invoice.update({
            where: { id: invoice.id },
            data: { status: 'OVERDUE' }
          })
          
          // Mettre √† jour l'objet pour la r√©ponse
          return { 
            ...invoice, 
            status: 'OVERDUE' as any
          }
        }
        
        return invoice
      })
    )

    console.log(`‚úÖ ${updatedInvoices.length} factures r√©cup√©r√©es pour user ${session.user.id}`)

    return NextResponse.json({ invoices: updatedInvoices })

  } catch (error) {
    console.error("‚ùå Erreur r√©cup√©ration factures:", error)
    return handleError(error, request.url)
  }
})

// POST /api/invoices - Cr√©er une nouvelle facture
export const POST = withClientSecurity(async (request: NextRequest, session) => {
  try {
    // 1. Validation s√©curis√©e des donn√©es d'entr√©e
    const rawData = await request.json()
    const { orderId, amount, dueDate } = validateData(createInvoiceSchema, rawData)

    console.log(`üßæ Cr√©ation facture pour commande ${orderId} par user ${session.user.id}`)

    // 2. V√©rification s√©curis√©e que la commande existe et appartient √† l'utilisateur
    const order = await prisma.order.findUnique({
      where: {
        id: orderId,
        userId: session.user.id // S√âCURIT√â: V√©rifier ownership de la commande
      }
    })
    
    if (!order) {
      throw createError.notFound("Commande non trouv√©e ou non autoris√©e")
    }

    // 3. Validation de la date d'√©ch√©ance
    const dueDateObj = new Date(dueDate)
    const now = new Date()
    if (dueDateObj <= now) {
      throw createError.validation("La date d'√©ch√©ance doit √™tre dans le futur")
    }

    // 4. Cr√©ation s√©curis√©e de la facture
    const invoice = await prisma.invoice.create({
      data: {
        orderId,
        userId: session.user.id, // S√âCURIT√â: Forcer l'ID de l'utilisateur connect√©
        amount,
        status: 'PENDING',
        dueDate: dueDateObj,
      }
    })

    console.log(`‚úÖ Facture cr√©√©e: ${invoice.id} pour montant ${amount} CHF`)
    
    return NextResponse.json(invoice, { status: 201 })

  } catch (error) {
    console.error("‚ùå Erreur cr√©ation facture:", error)
    return handleError(error, request.url)
  }
})