// prisma/schema.prisma
generator client {
 provider = "prisma-client-js"
}

datasource db {
 provider = "postgresql"
 url      = env("DATABASE_URL")
}

model User {
 id               String         @id @default(cuid())
 name             String?
 email            String         @unique
 emailVerified    DateTime?
 phone            String        
 image            String?
 password         String?
 role             UserRole       @default(CLIENT)
 resetToken       String?        // Ajout pour la réinitialisation du mot de passe
 resetTokenExpiry DateTime?      // Ajout pour la réinitialisation du mot de passe
 createdAt        DateTime       @default(now())
 updatedAt        DateTime       @updatedAt
 producer         Producer?
 orders           Order[]
 accounts         Account[]
 sessions         Session[]
 notifications Notification[]
 invoices         Invoice[]
 adminLogs   AdminLog[]
}

model Account {
 id                String   @id @default(cuid())
 userId            String
 type              String
 provider          String
 providerAccountId String
 refresh_token     String?  @db.Text
 access_token      String?  @db.Text
 expires_at        Int?
 token_type        String?
 scope             String?
 id_token          String?  @db.Text
 session_state     String?
 user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

 @@unique([provider, providerAccountId])
}

model Session {
 id           String   @id @default(cuid())
 sessionToken String   @unique
 userId       String
 expires      DateTime
 user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Producer {
 id          String    @id @default(cuid())
 userId      String    @unique
 companyName String?   
 address     String?   
 description String?   @db.Text
 products    Product[]
 user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id               String               @id @default(cuid())
  name             String
  description      String?              @db.Text
  price            Float
  type             ProductType
  image            String?
  unit             String               // kg, g, pièce, etc.
  producerId       String
  producer         Producer             @relation(fields: [producerId], references: [id], onDelete: Cascade)
  stock            Stock?
  orderItems       OrderItem[]
  categories       Category[]
  available        Boolean              @default(true)
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  deliverySlots    DeliverySlot[]
  stockAlerts      StockAlert?          // Relation inverse pour StockAlert
  stockHistory     StockHistory[]       // Relation inverse pour StockHistory
  productionSchedules ProductionSchedule[] // Relation inverse pour ProductionSchedule
  acceptDeferred   Boolean              @default(false)  // Accepte paiement sous 30 jours
  minOrderQuantity Float                @default(0)      // Quantité minimale à la vente
}

model Stock {
 id        String   @id @default(cuid())
 productId String   @unique
 quantity  Float
 product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
 updatedAt DateTime @updatedAt
}

model Category {
 id       String    @id @default(cuid())
 name     String    @unique
 products Product[]
}

model Order {
 id        String      @id @default(cuid())
 userId    String
 status    OrderStatus @default(PENDING)
 items     OrderItem[]
 total     Float
 metadata  String?     @db.Text // Pour stocker les infos de livraison et paiement
 createdAt DateTime    @default(now())
 updatedAt DateTime    @updatedAt
 user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
 bookings  Booking[]
 invoice          Invoice?
}

model OrderItem {
 id        String  @id @default(cuid())
 orderId   String
 productId String
 quantity  Float
 price     Float
 order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
 product   Product @relation(fields: [productId], references: [id])
}

model DeliverySlot {
 id          String       @id @default(cuid())
 productId   String
 product     Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
 date        DateTime
 maxCapacity Float        // Capacité maximale en kg
 reserved    Float        // Quantité déjà réservée
 isAvailable Boolean      @default(true)
 createdAt   DateTime     @default(now())
 updatedAt   DateTime     @updatedAt
 bookings    Booking[]
}

model Booking {
  id            String       @id @default(cuid())
  deliverySlot  DeliverySlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  slotId        String
  orderId       String
  order         Order        @relation(fields: [orderId], references: [id], onDelete: Cascade)
  quantity      Float
  price         Float?       // Ajoutez ce champ s'il n'existe pas
  status        BookingStatus @default(TEMPORARY)  // Maintenant TEMPORARY
  expiresAt     DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String   // Correspond aux valeurs de NotificationType
  title     String
  message   String
  link      String?
  data      Json?    // Données supplémentaires liées à la notification
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
 ADMIN
 PRODUCER
 CLIENT
}

enum ProductType {
 FRESH
 DRIED
 SUBSTRATE
 WELLNESS
}

enum OrderStatus {
  DRAFT     // Nouveau statut pour les paniers non confirmés
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  // Nouveaux statuts
  INVOICE_PENDING
  INVOICE_PAID
  INVOICE_OVERDUE
}

enum BookingStatus {
  TEMPORARY     // Réordonnée en premier
  PENDING
  CONFIRMED
  CANCELLED
}

model StockAlert {
  id          String   @id @default(cuid())
  productId   String   @unique
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  threshold   Float    // Seuil minimal en quantité
  percentage  Boolean  @default(false) // Si true, le seuil est un pourcentage de la capacité habituelle
  emailAlert  Boolean  @default(true)  // Envoyer une alerte par email
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StockHistory {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity    Float    // Quantité à ce moment
  date        DateTime @default(now())
  type        String   // "sale", "adjustment", "refund", "initial"
  orderId     String?  // ID de la commande liée (si applicable)
  note        String?  // Note explicative
}

model ProductionSchedule {
  id          String   @id @default(cuid())
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  date        DateTime // Date prévue de disponibilité
  quantity    Float    // Quantité prévue
  note        String?  // Notes supplémentaires
  isPublic    Boolean  @default(true) // Visible par les clients ou non
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id               String      @id @default(cuid())
  orderId          String      @unique  // Ajout de @unique ici pour corriger l'erreur
  userId           String
  amount           Float
  status           String      // PENDING, PAID, OVERDUE, CANCELLED  
  dueDate          DateTime
  paidAt           DateTime?
  paymentMethod    String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  order            Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user             User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([orderId])
}

model AdminLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String
  adminId     String
  details     String?  @db.Text
  createdAt   DateTime @default(now())
  
  admin       User     @relation(fields: [adminId], references: [id])
  
  @@index([adminId])
  @@index([entityType, entityId])
  @@index([createdAt])
}